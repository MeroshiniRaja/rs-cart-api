{
  "service": {
    "service": "cart-service",
    "serviceObject": {
      "name": "cart-service"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "stage": "dev",
      "region": "eu-west-1",
      "environment": {
        "PG_HOST": "rds-cloud-x-rs-cart-app.cajtmuj8ep1n.us-east-1.rds.amazonaws.com",
        "PG_PORT": "5432",
        "PG_DATABASE": "cloud_x_123",
        "PG_USER": "postgres",
        "PG_PASSWORD": "postgres",
        "GET_PRODUCT_LIST_LAMBDA_ARN": "arn:aws:lambda:us-east-1:342406933836:function:product-service-dev-getproductslist"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeAsync"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "MainLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cart-service-dev-main"
            }
          },
          "CreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cart-service-dev-createUser"
            }
          },
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cart-service-dev-getUser"
            }
          },
          "GetOrderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cart-service-dev-getOrder"
            }
          },
          "CreateOrderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cart-service-dev-createOrder"
            }
          },
          "UpdateOrderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cart-service-dev-updateOrder"
            }
          },
          "FindUserCartLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cart-service-dev-findUserCart"
            }
          },
          "ClearUserCartLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cart-service-dev-clearUserCart"
            }
          },
          "UpdateUserCartLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cart-service-dev-updateUserCart"
            }
          },
          "CheckoutLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cart-service-dev-checkout"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "cart-service",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cart-service-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cart-service-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "cart-service",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "MainLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cart-service/dev/1669783799375-2022-11-30T04:49:59.375Z/cart-service.zip"
              },
              "Handler": "dist/serverless.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "cart-service-dev-main",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PG_HOST": "rds-cloud-x-rs-cart-app.cajtmuj8ep1n.us-east-1.rds.amazonaws.com",
                  "PG_PORT": "5432",
                  "PG_DATABASE": "cloud_x_123",
                  "PG_USER": "postgres",
                  "PG_PASSWORD": "postgres",
                  "GET_PRODUCT_LIST_LAMBDA_ARN": "arn:aws:lambda:us-east-1:342406933836:function:product-service-dev-getproductslist"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MainLogGroup"
            ]
          },
          "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cart-service/dev/1669783799375-2022-11-30T04:49:59.375Z/cart-service.zip"
              },
              "Handler": "dist/lambdas/index.createUser",
              "Runtime": "nodejs14.x",
              "FunctionName": "cart-service-dev-createUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PG_HOST": "rds-cloud-x-rs-cart-app.cajtmuj8ep1n.us-east-1.rds.amazonaws.com",
                  "PG_PORT": "5432",
                  "PG_DATABASE": "cloud_x_123",
                  "PG_USER": "postgres",
                  "PG_PASSWORD": "postgres",
                  "GET_PRODUCT_LIST_LAMBDA_ARN": "arn:aws:lambda:us-east-1:342406933836:function:product-service-dev-getproductslist"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUserLogGroup"
            ]
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cart-service/dev/1669783799375-2022-11-30T04:49:59.375Z/cart-service.zip"
              },
              "Handler": "dist/lambdas/index.getUser",
              "Runtime": "nodejs14.x",
              "FunctionName": "cart-service-dev-getUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PG_HOST": "rds-cloud-x-rs-cart-app.cajtmuj8ep1n.us-east-1.rds.amazonaws.com",
                  "PG_PORT": "5432",
                  "PG_DATABASE": "cloud_x_123",
                  "PG_USER": "postgres",
                  "PG_PASSWORD": "postgres",
                  "GET_PRODUCT_LIST_LAMBDA_ARN": "arn:aws:lambda:us-east-1:342406933836:function:product-service-dev-getproductslist"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "GetOrderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cart-service/dev/1669783799375-2022-11-30T04:49:59.375Z/cart-service.zip"
              },
              "Handler": "dist/lambdas/index.getOrder",
              "Runtime": "nodejs14.x",
              "FunctionName": "cart-service-dev-getOrder",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PG_HOST": "rds-cloud-x-rs-cart-app.cajtmuj8ep1n.us-east-1.rds.amazonaws.com",
                  "PG_PORT": "5432",
                  "PG_DATABASE": "cloud_x_123",
                  "PG_USER": "postgres",
                  "PG_PASSWORD": "postgres",
                  "GET_PRODUCT_LIST_LAMBDA_ARN": "arn:aws:lambda:us-east-1:342406933836:function:product-service-dev-getproductslist"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetOrderLogGroup"
            ]
          },
          "CreateOrderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cart-service/dev/1669783799375-2022-11-30T04:49:59.375Z/cart-service.zip"
              },
              "Handler": "dist/lambdas/index.createOrder",
              "Runtime": "nodejs14.x",
              "FunctionName": "cart-service-dev-createOrder",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PG_HOST": "rds-cloud-x-rs-cart-app.cajtmuj8ep1n.us-east-1.rds.amazonaws.com",
                  "PG_PORT": "5432",
                  "PG_DATABASE": "cloud_x_123",
                  "PG_USER": "postgres",
                  "PG_PASSWORD": "postgres",
                  "GET_PRODUCT_LIST_LAMBDA_ARN": "arn:aws:lambda:us-east-1:342406933836:function:product-service-dev-getproductslist"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateOrderLogGroup"
            ]
          },
          "UpdateOrderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cart-service/dev/1669783799375-2022-11-30T04:49:59.375Z/cart-service.zip"
              },
              "Handler": "dist/lambdas/index.updateOrder",
              "Runtime": "nodejs14.x",
              "FunctionName": "cart-service-dev-updateOrder",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PG_HOST": "rds-cloud-x-rs-cart-app.cajtmuj8ep1n.us-east-1.rds.amazonaws.com",
                  "PG_PORT": "5432",
                  "PG_DATABASE": "cloud_x_123",
                  "PG_USER": "postgres",
                  "PG_PASSWORD": "postgres",
                  "GET_PRODUCT_LIST_LAMBDA_ARN": "arn:aws:lambda:us-east-1:342406933836:function:product-service-dev-getproductslist"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateOrderLogGroup"
            ]
          },
          "FindUserCartLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cart-service/dev/1669783799375-2022-11-30T04:49:59.375Z/cart-service.zip"
              },
              "Handler": "dist/lambdas/index.findUserCart",
              "Runtime": "nodejs14.x",
              "FunctionName": "cart-service-dev-findUserCart",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PG_HOST": "rds-cloud-x-rs-cart-app.cajtmuj8ep1n.us-east-1.rds.amazonaws.com",
                  "PG_PORT": "5432",
                  "PG_DATABASE": "cloud_x_123",
                  "PG_USER": "postgres",
                  "PG_PASSWORD": "postgres",
                  "GET_PRODUCT_LIST_LAMBDA_ARN": "arn:aws:lambda:us-east-1:342406933836:function:product-service-dev-getproductslist"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FindUserCartLogGroup"
            ]
          },
          "ClearUserCartLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cart-service/dev/1669783799375-2022-11-30T04:49:59.375Z/cart-service.zip"
              },
              "Handler": "dist/lambdas/index.clearUserCart",
              "Runtime": "nodejs14.x",
              "FunctionName": "cart-service-dev-clearUserCart",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PG_HOST": "rds-cloud-x-rs-cart-app.cajtmuj8ep1n.us-east-1.rds.amazonaws.com",
                  "PG_PORT": "5432",
                  "PG_DATABASE": "cloud_x_123",
                  "PG_USER": "postgres",
                  "PG_PASSWORD": "postgres",
                  "GET_PRODUCT_LIST_LAMBDA_ARN": "arn:aws:lambda:us-east-1:342406933836:function:product-service-dev-getproductslist"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ClearUserCartLogGroup"
            ]
          },
          "UpdateUserCartLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cart-service/dev/1669783799375-2022-11-30T04:49:59.375Z/cart-service.zip"
              },
              "Handler": "dist/lambdas/index.updateUserCart",
              "Runtime": "nodejs14.x",
              "FunctionName": "cart-service-dev-updateUserCart",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PG_HOST": "rds-cloud-x-rs-cart-app.cajtmuj8ep1n.us-east-1.rds.amazonaws.com",
                  "PG_PORT": "5432",
                  "PG_DATABASE": "cloud_x_123",
                  "PG_USER": "postgres",
                  "PG_PASSWORD": "postgres",
                  "GET_PRODUCT_LIST_LAMBDA_ARN": "arn:aws:lambda:us-east-1:342406933836:function:product-service-dev-getproductslist"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserCartLogGroup"
            ]
          },
          "CheckoutLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cart-service/dev/1669783799375-2022-11-30T04:49:59.375Z/cart-service.zip"
              },
              "Handler": "dist/lambdas/index.checkout",
              "Runtime": "nodejs14.x",
              "FunctionName": "cart-service-dev-checkout",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PG_HOST": "rds-cloud-x-rs-cart-app.cajtmuj8ep1n.us-east-1.rds.amazonaws.com",
                  "PG_PORT": "5432",
                  "PG_DATABASE": "cloud_x_123",
                  "PG_USER": "postgres",
                  "PG_PASSWORD": "postgres",
                  "GET_PRODUCT_LIST_LAMBDA_ARN": "arn:aws:lambda:us-east-1:342406933836:function:product-service-dev-getproductslist"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CheckoutLogGroup"
            ]
          },
          "MainLambdaVersionam6Sebjjiz49rWHnx7VVeeInEbnNNXP5DJ8FBlUIM8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MainLambdaFunction"
              },
              "CodeSha256": "yEZc8R3UhgBFS6GXOue9K3TaK2OJ132u0iNPDdH1Lp8="
            }
          },
          "CreateUserLambdaVersionQOviTq6n7Y7nvneHdtFwGpUgNAU3aYQMFxq6h0LGNU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserLambdaFunction"
              },
              "CodeSha256": "yEZc8R3UhgBFS6GXOue9K3TaK2OJ132u0iNPDdH1Lp8="
            }
          },
          "GetUserLambdaVersionaGTrPW4qRHecPx5A3k0NvTNkNzp2HvoCe57mQTZadM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
              "CodeSha256": "yEZc8R3UhgBFS6GXOue9K3TaK2OJ132u0iNPDdH1Lp8="
            }
          },
          "GetOrderLambdaVersionBAz3l66xAskfLgoW4MQ9qfL0StDhwTuKfoQFLRfdQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOrderLambdaFunction"
              },
              "CodeSha256": "yEZc8R3UhgBFS6GXOue9K3TaK2OJ132u0iNPDdH1Lp8="
            }
          },
          "CreateOrderLambdaVersionDhArJMZMd5bEQ1OX0kpDaS7ZGWjeloFSo4SQIygzI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateOrderLambdaFunction"
              },
              "CodeSha256": "yEZc8R3UhgBFS6GXOue9K3TaK2OJ132u0iNPDdH1Lp8="
            }
          },
          "UpdateOrderLambdaVersion9Jus6fqlOCIfxanSk1mIc71C0Ucg4F7B3stKPlap20": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateOrderLambdaFunction"
              },
              "CodeSha256": "yEZc8R3UhgBFS6GXOue9K3TaK2OJ132u0iNPDdH1Lp8="
            }
          },
          "FindUserCartLambdaVersion5G3n4Cq4NbuiuGArhdJL8OwAXgk0zYjca4rwCBzjoqo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FindUserCartLambdaFunction"
              },
              "CodeSha256": "yEZc8R3UhgBFS6GXOue9K3TaK2OJ132u0iNPDdH1Lp8="
            }
          },
          "ClearUserCartLambdaVersionbJeqxXtt8SJOhjFDmjMsLCxBcbFPfU4ib0MOArdhs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ClearUserCartLambdaFunction"
              },
              "CodeSha256": "yEZc8R3UhgBFS6GXOue9K3TaK2OJ132u0iNPDdH1Lp8="
            }
          },
          "UpdateUserCartLambdaVersionO460NEVngyMmNjHEQLdwGi7NLzUUW4o7GeZUTcl0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserCartLambdaFunction"
              },
              "CodeSha256": "yEZc8R3UhgBFS6GXOue9K3TaK2OJ132u0iNPDdH1Lp8="
            }
          },
          "CheckoutLambdaVersionrQ1NfaP0ipemmzej70cH09e7tgiwVfu1U28hcYJSOYI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CheckoutLambdaFunction"
              },
              "CodeSha256": "yEZc8R3UhgBFS6GXOue9K3TaK2OJ132u0iNPDdH1Lp8="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-cart-service",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOrder": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "order",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOrderIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceOrder"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCart": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "cart",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCartUseridVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCart"
              },
              "PathPart": "{userId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCartCheckout": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCart"
              },
              "PathPart": "checkout",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCartCheckoutUseridVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCartCheckout"
              },
              "PathPart": "{userId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MainLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MainLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProxyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MainLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MainLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodOrderIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrderIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetOrderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetOrderLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodOrderPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrder"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateOrderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateOrderLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodOrderIdVarPatch": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PATCH",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrderIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateOrderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateOrderLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCartUseridVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCartUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FindUserCartLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "FindUserCartLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCartUseridVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCartUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ClearUserCartLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ClearUserCartLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCartUseridVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCartUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUserCartLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateUserCartLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCartCheckoutUseridVarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCartCheckoutUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CheckoutLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CheckoutLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1669783784497": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodAny",
              "ApiGatewayMethodProxyVarAny",
              "ApiGatewayMethodUserPost",
              "ApiGatewayMethodUserIdVarGet",
              "ApiGatewayMethodOrderIdVarGet",
              "ApiGatewayMethodOrderPost",
              "ApiGatewayMethodOrderIdVarPatch",
              "ApiGatewayMethodCartUseridVarGet",
              "ApiGatewayMethodCartUseridVarDelete",
              "ApiGatewayMethodCartUseridVarPut",
              "ApiGatewayMethodCartCheckoutUseridVarPost"
            ]
          },
          "MainLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MainLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetOrderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOrderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateOrderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateOrderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateOrderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateOrderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FindUserCartLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FindUserCartLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ClearUserCartLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ClearUserCartLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUserCartLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserCartLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CheckoutLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CheckoutLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-cart-service-dev-ServerlessDeploymentBucketName"
            }
          },
          "MainLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MainLambdaVersionam6Sebjjiz49rWHnx7VVeeInEbnNNXP5DJ8FBlUIM8"
            },
            "Export": {
              "Name": "sls-cart-service-dev-MainLambdaFunctionQualifiedArn"
            }
          },
          "CreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUserLambdaVersionQOviTq6n7Y7nvneHdtFwGpUgNAU3aYQMFxq6h0LGNU"
            },
            "Export": {
              "Name": "sls-cart-service-dev-CreateUserLambdaFunctionQualifiedArn"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLambdaVersionaGTrPW4qRHecPx5A3k0NvTNkNzp2HvoCe57mQTZadM"
            },
            "Export": {
              "Name": "sls-cart-service-dev-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "GetOrderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOrderLambdaVersionBAz3l66xAskfLgoW4MQ9qfL0StDhwTuKfoQFLRfdQ"
            },
            "Export": {
              "Name": "sls-cart-service-dev-GetOrderLambdaFunctionQualifiedArn"
            }
          },
          "CreateOrderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateOrderLambdaVersionDhArJMZMd5bEQ1OX0kpDaS7ZGWjeloFSo4SQIygzI"
            },
            "Export": {
              "Name": "sls-cart-service-dev-CreateOrderLambdaFunctionQualifiedArn"
            }
          },
          "UpdateOrderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateOrderLambdaVersion9Jus6fqlOCIfxanSk1mIc71C0Ucg4F7B3stKPlap20"
            },
            "Export": {
              "Name": "sls-cart-service-dev-UpdateOrderLambdaFunctionQualifiedArn"
            }
          },
          "FindUserCartLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FindUserCartLambdaVersion5G3n4Cq4NbuiuGArhdJL8OwAXgk0zYjca4rwCBzjoqo"
            },
            "Export": {
              "Name": "sls-cart-service-dev-FindUserCartLambdaFunctionQualifiedArn"
            }
          },
          "ClearUserCartLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ClearUserCartLambdaVersionbJeqxXtt8SJOhjFDmjMsLCxBcbFPfU4ib0MOArdhs"
            },
            "Export": {
              "Name": "sls-cart-service-dev-ClearUserCartLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserCartLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserCartLambdaVersionO460NEVngyMmNjHEQLdwGi7NLzUUW4o7GeZUTcl0"
            },
            "Export": {
              "Name": "sls-cart-service-dev-UpdateUserCartLambdaFunctionQualifiedArn"
            }
          },
          "CheckoutLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CheckoutLambdaVersionrQ1NfaP0ipemmzej70cH09e7tgiwVfu1U28hcYJSOYI"
            },
            "Export": {
              "Name": "sls-cart-service-dev-CheckoutLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-cart-service-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "lambdasPath": "dist/lambdas/index"
    },
    "plugins": [
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "main": {
        "handler": "dist/serverless.handler",
        "events": [
          {
            "http": {
              "method": "any",
              "path": "",
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "method": "any",
              "path": "{proxy+}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cart-service-dev-main",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "MainLambdaVersionam6Sebjjiz49rWHnx7VVeeInEbnNNXP5DJ8FBlUIM8"
      },
      "createUser": {
        "handler": "dist/lambdas/index.createUser",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "user",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cart-service-dev-createUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateUserLambdaVersionQOviTq6n7Y7nvneHdtFwGpUgNAU3aYQMFxq6h0LGNU"
      },
      "getUser": {
        "handler": "dist/lambdas/index.getUser",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "user/{id}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cart-service-dev-getUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetUserLambdaVersionaGTrPW4qRHecPx5A3k0NvTNkNzp2HvoCe57mQTZadM"
      },
      "getOrder": {
        "handler": "dist/lambdas/index.getOrder",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "order/{id}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cart-service-dev-getOrder",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetOrderLambdaVersionBAz3l66xAskfLgoW4MQ9qfL0StDhwTuKfoQFLRfdQ"
      },
      "createOrder": {
        "handler": "dist/lambdas/index.createOrder",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "order",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cart-service-dev-createOrder",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateOrderLambdaVersionDhArJMZMd5bEQ1OX0kpDaS7ZGWjeloFSo4SQIygzI"
      },
      "updateOrder": {
        "handler": "dist/lambdas/index.updateOrder",
        "events": [
          {
            "http": {
              "method": "patch",
              "path": "order/{id}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cart-service-dev-updateOrder",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateOrderLambdaVersion9Jus6fqlOCIfxanSk1mIc71C0Ucg4F7B3stKPlap20"
      },
      "findUserCart": {
        "handler": "dist/lambdas/index.findUserCart",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "cart/{userId}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cart-service-dev-findUserCart",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "FindUserCartLambdaVersion5G3n4Cq4NbuiuGArhdJL8OwAXgk0zYjca4rwCBzjoqo"
      },
      "clearUserCart": {
        "handler": "dist/lambdas/index.clearUserCart",
        "events": [
          {
            "http": {
              "method": "delete",
              "path": "cart/{userId}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cart-service-dev-clearUserCart",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ClearUserCartLambdaVersionbJeqxXtt8SJOhjFDmjMsLCxBcbFPfU4ib0MOArdhs"
      },
      "updateUserCart": {
        "handler": "dist/lambdas/index.updateUserCart",
        "events": [
          {
            "http": {
              "method": "put",
              "path": "cart/{userId}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cart-service-dev-updateUserCart",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateUserCartLambdaVersionO460NEVngyMmNjHEQLdwGi7NLzUUW4o7GeZUTcl0"
      },
      "checkout": {
        "handler": "dist/lambdas/index.checkout",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "cart/checkout/{userId}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cart-service-dev-checkout",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CheckoutLambdaVersionrQ1NfaP0ipemmzej70cH09e7tgiwVfu1U28hcYJSOYI"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "cart-service",
      "frameworkVersion": "3",
      "useDotenv": true,
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/Meroshini_Raja/myWorkspace/AWSTraining/rs-cart-api/.serverless/cart-service.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/cart-service/dev/1669783799375-2022-11-30T04:49:59.375Z",
    "artifact": "cart-service.zip"
  }
}